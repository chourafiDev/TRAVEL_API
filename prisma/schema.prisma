// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }


datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  user
  admin
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String   @unique
  firstName     String
  lastName      String
  imagePublicId String?
  imageUrl      String?
  role          Role     @default(user)
  password      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  destinations Destination[]
  reviews      Review[]
  favorites    Favorite[]
  bookings     Bookings[]
}

model Destination {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  destination String
  price       Float
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images    DestinationImages[]
  reviews   Review[]
  favorites Favorite[]
  bookings  Bookings[]

  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model DestinationImages {
  id            Int    @id @default(autoincrement())
  imageUrl      String
  imagePublicId String

  destination   Destination @relation(fields: [destinationId], references: [id])
  destinationId Int
}

model Favorite {
  id Int  @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  destination   Destination @relation(fields: [destinationId], references: [id])
  destinationId Int

  @@unique([userId, destinationId])
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Float
  createdAt DateTime @default(now())

  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: SetDefault)
  userId        Int
}

model Category {
  id            Int      @id @default(autoincrement())
  content       String
  imageUrl      String
  imagePublicId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  destinations Destination[]
}


model Bookings {
  id Int  @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int

  number            String @unique
  amountPaid        Int

  createdAt     DateTime @default(now())

}
